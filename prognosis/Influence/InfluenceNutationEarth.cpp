//==============================================================================//
// Andrianov N.G.
// opbit predict 
// module find Influence Force
// Nutation Earth
//==============================================================================//
#include <math.h>
#include <stdio.h>

#include "InfluenceForce.h"

namespace Force
{
	//==============================================================================//
	// расчет среднего наклона эклиптики
	//==============================================================================//
	double InfluenceForce::E2000( double E1, double E2)
	{
		double E0, THJ, S, T1, T2, DT, T12, T13, DT2, DT3;
		E0 = 2451545.0;
		THJ = 36525.0;
		S = 206264.806;                                                       
		T1=(E1-E0)/THJ;                                     
		T2=(E2-E0)/THJ;                                     
		DT=T2-T1;                                           
		T12=T1*T1;
		T13=T12*T1;                                          
		DT2=DT*DT;                                          
		DT3=DT*DT2;
		//NAKLON  EkLIPTIKI k EKBATORY  
		double rE2000 =  ( 84381.4480 - 46.81500*T1 - 0.000590*T12 + 0.0018130*T13)
			+(-46.81500 - 0.001170*T1 + 0.0054390*T12)*DT
			+(-0.000590 + 0.0054390*T1)*DT2+0.0018130*DT3;
		rE2000=rE2000/S; 
		return rE2000;                                            
	} 
	//==============================================================================//
	//
	//==============================================================================//
	void InfluenceForce::FA2000( double AED, double *FA )
	{
		double E0, THJ, PII, PI, T, DT2, DT3, A, B, C, P, R;
		E0 = 2451545.0;
		THJ = 36525.0;

		PII=6.283185307179586;
		PI=3.141592653589793;
		T=(AED-E0)/THJ;
		DT2=T*T;
		DT3=T*DT2;

		A=PI*2650.0+3.470890870;
		FA[0]=2.3555483930+A*T+0.1517952E-3*DT2+0.3103E-6*DT3;

		B=PI*198.0+6.26661061;
		FA[1]=6.24003594+B*T-0.27974E-5*DT2-0.582E-7*DT3;

		C=PI*2684.0+1.431476080;
		FA[2]=1.627901930+C*T-0.642717E-4*DT2+0.533E-7*DT3;

		P=PI*2472.0+5.36010650;
		FA[3]=5.198469510+P*T-0.34085E-4*DT2+0.921E-7*DT3;

		R=PI*10.0+2.34111940;
		FA[4]=2.182438620-R*T+0.361429E-4*DT2+0.388E-7*DT3;

		for( int it = 0; it < 5; it++ )
			FA[it]= DMOD( FA[it], PII ) + PII*DDIM(-DSIGN(1.0,FA[it] ), 0.0 );

	}
	//==============================================================================//
	// вычисление поправки нутации
	//==============================================================================//
	void InfluenceForce::N2000( int N, double AJD, double *HYT )
	{
		double FA[5];
		double B[2];

		double EO, THJ, S, T, A;

		EO = 2451545.0;
		THJ = 36525.0;
		S = 206264.806;

		//ARG0(275);
		//AMPL0(280);

		//AMPL1(250);
		//ARG1(255);
		double AMPL0[280] = { 6798.40, -171996.E-4, -174.2E-4, 92025.E-4, 8.9E-4,
			182.60,  -13187.E-4,   -1.6E-4,  5736.E-4,-3.1E-4,
			13.70,   -2274.E-4,   -0.2E-4,   977.E-4,-0.5E-4,
			3399.20,    2062.E-4,    0.2E-4,  -895.E-4, 0.5E-4,
			365.20,    1426.E-4,   -3.4E-4,    54.E-4,-0.1E-4,
			27.60,     712.E-4,    0.1E-4,    -7.E-4, 0.0,
			121.70,    -517.E-4,    1.2E-4,   224.E-4,-0.6E-4,
			13.60,    -386.E-4,   -0.4E-4,   200.E-4, 0.0,
			9.10,    -301.E-4,    0.0,     129.E-4,-0.1E-4,
			365.30,     217.E-4,   -0.5E-4,   -95.E-4, 0.3E-4,
			31.80,    -158.E-4,    0.0,      -1.E-4, 0.0,
			177.80,     129.E-4,    0.1E-4,   -70.E-4, 0.0,
			27.10,     123.E-4,    0.0,     -53.E-4, 0.0,
			27.70,	     63.E-4,    0.1E-4,   -33.E-4, 0.0,
			14.80,	     63.E-4,    0.0,      -2.E-4, 0.0,
			9.60,	    -59.E-4,    0.0,      26.E-4, 0.0,
			27.40,     -58.E-4,   -0.1E-4,    32.E-4, 0.0,
			9.10,     -51.E-4,    0.0,      27.E-4, 0.0,
			205.90,	     48.E-4,    0.0,       1.E-4, 0.0,
			1305.50,	     46.E-4,    0.0,     -24.E-4, 0.0,
			7.10,	    -38.E-4,    0.0,      16.E-4, 0.0,
			6.90,	    -31.E-4,    0.0,      13.E-4, 0.0,
			13.80,	     29.E-4,    0.0,      -1.E-4, 0.0,
			23.90,	     29.E-4,    0.0,     -12.E-4, 0.0,
			13.60,	     26.E-4,    0.0,      -1.E-4, 0.0,
			173.30,	    -22.E-4,    0.0,       0.0,  0.0,
			27.0,	     21.E-4,    0.0,     -10.E-4, 0.0,
			182.60,	     17.E-4,   -0.1E-4,     0.0,  0.0,
			91.30,	    -16.E-4,    0.1E-4,     7.E-4, 0.0,
			32.0,       16.E-4,    0.0,      -8.E-4, 0.0,
			386.0,	    -15.E-4,    0.0,       9.E-4, 0.0,
			31.70,	    -13.E-4,    0.0,       7.E-4, 0.0,
			346.60,	    -12.E-4,    0.0,       6.E-4, 0.0,
			1095.20,	     11.E-4,    0.0,       0.0,  0.0,
			9.50,	    -10.E-4,    0.0,       5.E-4, 0.0,
			5.60,	     -8.E-4,    0.0,       3.E-4, 0.0,
			14.20,	     -7.E-4,    0.0,       3.E-4, 0.0,
			7.10,	     -7.E-4,    0.0,       3.E-4, 0.0,
			34.80,	     -7.E-4,    0.0,       0.0,  0.0,
			13.20,	      7.E-4,    0.0,      -3.E-4, 0.0,
			199.80,	     -6.E-4,    0.0,       3.E-4, 0.0,
			14.80,	     -6.E-4,    0.0,       3.E-4, 0.0,
			12.80,	      6.E-4,    0.0,      -3.E-4, 0.0,
			9.60,	      6.E-4,    0.0,       0.0,  0.0,
			23.90,       6.E-4,    0.0,      -3.E-4, 0.0,
			14.70,      -5.E-4,    0.0,       3.E-4, 0.0,
			346.60,      -5.E-4,    0.0,       3.E-4, 0.0,
			6.90,      -5.E-4,    0.0,       3.E-4, 0.0,
			29.80,       5.E-4,    0.0,       0.0,  0.0,
			411.80,      -4.E-4,    0.0,       0.0,  0.0,
			29.50,      -4.E-4,    0.0,       0.0,  0.0,
			15.40,      -4.E-4,    0.0,       0.0,  0.0,
			26.90,       4.E-4,    0.0,       0.0,  0.0,
			212.30,       4.E-4,    0.0,      -2.E-4, 0.0,
			119.60,       4.E-4,    0.0,      -2.E-4, 0.0,
			25.60,      -3.E-4,    0.0,       0.0,  0.0 };
		double AMPL1[250] = { 3232.90,      -3.E-4,    0.0,       0.0,  0.0,
			9.80,      -3.E-4,    0.0,       1.E-4, 0.0,
			7.20,      -3.E-4,    0.0,       1.E-4, 0.0,
			9.40,      -3.E-4,    0.0,       1.E-4, 0.0,
			5.50,      -3.E-4,    0.0,       1.E-4, 0.0,
			1615.70,      -3.E-4,    0.0,       1.E-4, 0.0,
			9.10,       3.E-4,    0.0,       0.0,  0.0,
			5.80,      -2.E-4,    0.0,       1.E-4, 0.0,
			27.80,      -2.E-4,    0.0,       1.E-4, 0.0,
			32.60,      -2.E-4,    0.0,       1.E-4, 0.0,
			6786.30,      -2.E-4,    0.0,       1.E-4, 0.0,
			13.70,      -2.E-4,    0.0,       1.E-4, 0.0,
			13.80,       2.E-4,    0.0,      -1.E-4, 0.0,
			9.20,       2.E-4,    0.0,       0.0,  0.0,
			8.90,       2.E-4,    0.0,      -1.E-4, 0.0,
			9.30,       2.E-4,    0.0,      -1.E-4, 0.0,
			9.60,      -1.E-4,    0.0,       0.0,  0.0,
			5.60,      -1.E-4,    0.0,       1.E-4, 0.0,
			34.70,      -1.E-4,    0.0,       0.0,  0.0,
			14.20,      -1.E-4,    0.0,       0.0,  0.0,
			117.50,      -1.E-4,    0.0,       0.0,  0.0,
			329.80,      -1.E-4,    0.0,       0.0,  0.0,
			32.80,      -1.E-4,    0.0,       0.0,  0.0,
			9.50,      -1.E-4,    0.0,       0.0,  0.0,
			32.80,      -1.E-4,    0.0,       0.0,  0.0,
			10.10,      -1.E-4,    0.0,       0.0,  0.0,
			15.90,      -1.E-4,    0.0,       0.0,  0.0,
			4.80,      -1.E-4,    0.0,       0.0,  0.0,
			25.40,      -1.E-4,    0.0,       0.0,  0.0,
			7.30,      -1.E-4,    0.0,       1.E-4, 0.0,
			4.70,      -1.E-4,    0.0,       0.0,  0.0,
			14.20,      -1.E-4,    0.0,       0.0,  0.0,
			13.60,      -1.E-4,    0.0,       0.0,  0.0,
			12.70,       1.E-4,    0.0,       0.0,  0.0,
			409.20,       1.E-4,    0.0,       0.0,  0.0,
			22.50,       1.E-4,    0.0,      -1.E-4, 0.0,
			8.70,       1.E-4,    0.0,       0.0,  0.0,
			14.60,       1.E-4,    0.0,      -1.E-4, 0.0,
			27.30,       1.E-4,    0.0,      -1.E-4, 0.0,
			169.00,       1.E-4,    0.0,       0.0,  0.0,
			13.10,       1.E-4,    0.0,       0.0,  0.0,
			9.10,       1.E-4,    0.0,       0.0,  0.0,
			131.70,       1.E-4,    0.0,       0.0,  0.0,
			7.10,       1.E-4,    0.0,       0.0,  0.0,
			12.80,       1.E-4,    0.0,      -1.E-4, 0.0,
			943.20,       1.E-4,    0.0,       0.0,  0.0,
			29.30,       1.E-4,    0.0,       0.0,  0.0,
			388.30,       1.E-4,    0.0,       0.0,  0.0,
			35.00,       1.E-4,    0.0,       0.0,  0.0,
			27.30,       1.E-4,    0.0,       0.0,  0.0 };

		double ARG0[275] = { 0.0, 0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 2.0,-2.0, 2.0,
			0.0, 0.0, 2.0, 0.0, 2.0,
			0.0, 0.0, 0.0, 0.0, 2.0,
			0.0, 1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 2.0,-2.0, 2.0,
			0.0, 0.0, 2.0, 0.0, 1.0,
			1.0, 0.0, 2.0, 0.0, 2.0,
			0.0,-1.0, 2.0,-2.0, 2.0,
			1.0, 0.0, 0.0,-2.0, 0.0,
			0.0, 0.0, 2.0,-2.0, 1.0,
			-1.0, 0.0, 2.0, 0.0, 2.0,
			1.0, 0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 2.0, 0.0,
			-1.0, 0.0, 2.0, 2.0, 2.0,
			-1.0, 0.0, 0.0, 0.0, 1.0,
			1.0, 0.0, 2.0, 0.0, 1.0,
			2.0, 0.0, 0.0,-2.0, 0.0,
			-2.0, 0.0, 2.0, 0.0, 1.0,
			0.0, 0.0, 2.0, 2.0, 2.0,
			2.0, 0.0, 2.0, 0.0, 2.0,
			2.0, 0.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 2.0,-2.0, 2.0,
			0.0, 0.0, 2.0, 0.0, 0.0,
			0.0, 0.0, 2.0,-2.0, 0.0,
			-1.0, 0.0, 2.0, 0.0, 1.0,
			0.0, 2.0, 0.0, 0.0, 0.0,
			0.0, 2.0, 2.0,-2.0, 2.0,
			-1.0, 0.0, 0.0, 2.0, 1.0,
			0.0, 1.0, 0.0, 0.0, 1.0,
			1.0, 0.0, 0.0,-2.0, 1.0,
			0.0,-1.0, 0.0, 0.0, 1.0,
			2.0, 0.0,-2.0, 0.0, 0.0,
			-1.0, 0.0, 2.0, 2.0, 1.0,
			1.0, 0.0, 2.0, 2.0, 2.0,
			0.0,-1.0, 2.0, 0.0, 2.0,
			0.0, 0.0, 2.0, 2.0, 1.0,
			1.0, 1.0, 0.0,-2.0, 0.0,
			0.0, 1.0, 2.0, 0.0, 2.0,
			-2.0, 0.0, 0.0, 2.0, 1.0,
			0.0, 0.0, 0.0, 2.0, 1.0,
			2.0, 0.0, 2.0,-2.0, 2.0,
			1.0, 0.0, 0.0, 2.0, 0.0,
			1.0, 0.0, 2.0,-2.0, 1.0,
			0.0, 0.0, 0.0,-2.0, 1.0,
			0.0,-1.0, 2.0,-2.0, 1.0,
			2.0, 0.0, 2.0, 0.0, 1.0,
			1.0,-1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0,-1.0, 0.0,
			0.0, 0.0, 0.0, 1.0, 0.0,
			0.0, 1.0, 0.0,-2.0, 0.0,
			1.0, 0.0,-2.0, 0.0, 0.0,
			2.0, 0.0, 0.0,-2.0, 1.0,
			0.0, 1.0, 2.0,-2.0, 1.0 };
		double ARG1[255] = { 1.0, 1.0, 0.0, 0.0, 0.0,
			1.0,-1.0, 0.0,-1.0, 0.0,
			-1.0,-1.0, 2.0, 2.0, 2.0,
			0.0,-1.0, 2.0, 2.0, 2.0,
			1.0,-1.0, 2.0, 0.0, 2.0,
			3.0, 0.0, 2.0, 0.0, 2.0,
			-2.0, 0.0, 2.0, 0.0, 2.0,
			1.0, 0.0, 2.0, 0.0, 0.0,
			-1.0, 0.0, 2.0, 4.0, 2.0,
			1.0, 0.0, 0.0, 0.0, 2.0,
			-1.0, 0.0, 2.0,-2.0, 1.0,
			0.0,-2.0, 2.0,-2.0, 1.0,
			-2.0, 0.0, 0.0, 0.0, 1.0,
			2.0, 0.0, 0.0, 0.0, 1.0,
			3.0, 0.0, 0.0, 0.0, 0.0,
			1.0, 1.0, 2.0, 0.0, 2.0,
			0.0, 0.0, 2.0, 1.0, 2.0,
			1.0, 0.0, 0.0, 2.0, 1.0,
			1.0, 0.0, 2.0, 2.0, 1.0,
			1.0, 1.0, 0.0,-2.0, 1.0,
			0.0, 1.0, 0.0, 2.0, 0.0,
			0.0, 1.0, 2.0,-2.0, 0.0,
			0.0, 1.0,-2.0, 2.0, 0.0,
			1.0, 0.0,-2.0, 2.0, 0.0,
			1.0, 0.0,-2.0,-2.0, 0.0,
			1.0, 0.0, 2.0,-2.0, 0.0,
			1.0, 0.0, 0.0,-4.0, 0.0,
			2.0, 0.0, 0.0,-4.0, 0.0,
			0.0, 0.0, 2.0, 4.0, 2.0,
			0.0, 0.0, 2.0,-1.0, 2.0,
			-2.0, 0.0, 2.0, 4.0, 2.0,
			2.0, 0.0, 2.0, 2.0, 2.0,
			0.0,-1.0, 2.0, 0.0, 1.0,
			0.0, 0.0,-2.0, 0.0, 1.0,
			0.0, 0.0, 4.0,-2.0, 2.0,     
			0.0, 1.0, 0.0, 0.0, 2.0,
			1.0, 1.0, 2.0,-2.0, 2.0,
			3.0, 0.0, 2.0,-2.0, 2.0,
			-2.0, 0.0, 2.0, 2.0, 2.0,
			-1.0, 0.0, 0.0, 0.0, 2.0,
			0.0, 0.0,-2.0, 2.0, 1.0,
			0.0, 1.0, 2.0, 0.0, 1.0,
			-1.0, 0.0, 4.0, 0.0, 2.0,
			2.0, 1.0, 0.0,-2.0, 0.0,
			2.0, 0.0, 0.0, 2.0, 0.0,
			2.0, 0.0, 2.0,-2.0, 1.0,
			2.0, 0.0,-2.0, 0.0, 1.0,
			1.0,-1.0, 0.0,-2.0, 0.0,
			-1.0, 0.0, 0.0, 1.0, 1.0,
			-1.0,-1.0, 0.0, 2.0, 1.0,
			0.0, 1.0, 0.0, 1.0, 0.0 };

		//AMPL0(280);
		//AMPL1(250);
		//ARG0(275);
		//ARG1(255);
		//EQUIVALENCE (AMPL(1),AMPL0(1)),(AMPL(281),AMPL1(1))
		//EQUIVALENCE (ARG(1),ARG0(1)),(ARG(276),ARG1(1))
		double AMPL[530];
		double ARG[530];

		for( int it = 0; it < 280; it++ )
			AMPL[it] = AMPL0[it];
		for( int it = 0; it < 250; it++ )
			AMPL[it+280] = AMPL1[it];

		for( int it = 0; it < 275; it++ )
			ARG[it] = ARG0[it];
		for( int it = 0; it < 255; it++ )
			ARG[it+275] = ARG1[it];


		T = (AJD - EO)/THJ;

		FA2000( AJD, FA );

		HYT[0] = 0.0;
		HYT[1] = 0.0;
		int L = 0;
		for( int i=0; i < N; i++ )
		{
			A = ( ARG[L]*FA[0] + ARG[L+1]*FA[1] + ARG[L+2]*FA[2] + ARG[L+3]*FA[3] + ARG[L+4]*FA[4] );

			HYT[0] = (AMPL[L+1] + AMPL[L+2]*T)*sin(A) + HYT[0];
			HYT[1] = (AMPL[L+3] + AMPL[L+4]*T)*cos(A) + HYT[1];
			B[0] = HYT[0]/S;
			B[1] = HYT[1]/S;
			// PRINT 2,(B(K),K=1,2)
			L=L+5;
		}

		// HYTAWIJ B DOLGOTE B PAD.
		HYT[0]=HYT[0]/S;
		// HYTAWIJ B HAKLOHE B PAD.
		HYT[1]=HYT[1]/S;
		// 1    FORMAT (1X,'BFA200',5f18.11)
		// 2    FORmat (1X,2f20.11)
		// 3    format (1x,e10.3)
	}
	//==============================================================================//
	// общая матрица нутации
	//==============================================================================//
	void InfluenceForce::NM2000( double E, double *HUT )
	{
		double A, Epsi, COS1, COS2, SIN1, SIN2, SIN3;
		int N;
		double HYT[2];

		//INTERFACE 
		//      FUNCTION E2000(E1,E2)
		//      REAL(KIND=8) :: E1
		//      REAL(KIND=8) :: E2
		//      REAL(KIND=8) :: E2000
		//      END FUNCTION E2000
		//   END INTERFACE 

		N = 106;      
		A = E2000( E, E );
		N2000( N, E, HYT );

		Epsi = A + HYT[1];
		COS1 = cos( A );
		COS2 = cos( Epsi );
		SIN1 = sin( HYT[0] );
		SIN2 = sin( A );
		SIN3 = sin( Epsi );

		//MATPITSA HYTATSII
		HUT[0] = cos( HYT[0] );
		HUT[1] = -SIN1*COS1;
		HUT[2] = -SIN1*SIN2;
		HUT[3] = SIN1*COS2;
		HUT[4] = HUT[0]*COS2*COS1+SIN3*SIN2;
		HUT[5] = HUT[0]*COS2*SIN2-SIN3*COS1;
		HUT[6] = SIN1*SIN3;
		HUT[7] = HUT[0]*SIN3*COS1-COS2*SIN2;
		HUT[8] = HUT[0]*SIN3*SIN2+COS2*COS1;
	}
	//==============================================================================//
};