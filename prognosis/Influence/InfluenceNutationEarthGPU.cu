//==============================================================================//
// Andrianov N.G.
// opbit predict 
// module find Influence Force
// Nutation Earth
// Setup array constant
// copy array to GPU
//==============================================================================//
#include <math.h>
#include <stdio.h>
#include "InfluenceForce.h"

#ifdef GPUCOMPILE

#include "cutilNP.h"
#include "cuda_runtime.h"
#include "device_launch_parameters.h"

namespace Force
{
	//==============================================================================//
	// задание массиво и копирование графический процессор
	//==============================================================================//
	void InfluenceForce::cuSetupAndLoadN2000DataToGPU()
	{
		printf( "Run SetupAndLoadN2000DataToGPU\n" );

		int memSizeAMPL_ARG = 530*sizeof( double );
		cutilSafeCall( cudaMalloc( (void**)&d_AMPL, memSizeAMPL_ARG ) );
		cutilSafeCall( cudaMalloc( (void**)&d_ARG, memSizeAMPL_ARG ) );

		//---------------------------//
		double AMPL0[280] = { 6798.40, -171996.E-4, -174.2E-4, 92025.E-4, 8.9E-4,
			182.60,  -13187.E-4,   -1.6E-4,  5736.E-4,-3.1E-4,
			13.70,   -2274.E-4,   -0.2E-4,   977.E-4,-0.5E-4,
			3399.20,    2062.E-4,    0.2E-4,  -895.E-4, 0.5E-4,
			365.20,    1426.E-4,   -3.4E-4,    54.E-4,-0.1E-4,
			27.60,     712.E-4,    0.1E-4,    -7.E-4, 0.0,
			121.70,    -517.E-4,    1.2E-4,   224.E-4,-0.6E-4,
			13.60,    -386.E-4,   -0.4E-4,   200.E-4, 0.0,
			9.10,    -301.E-4,    0.0,     129.E-4,-0.1E-4,
			365.30,     217.E-4,   -0.5E-4,   -95.E-4, 0.3E-4,
			31.80,    -158.E-4,    0.0,      -1.E-4, 0.0,
			177.80,     129.E-4,    0.1E-4,   -70.E-4, 0.0,
			27.10,     123.E-4,    0.0,     -53.E-4, 0.0,
			27.70,	     63.E-4,    0.1E-4,   -33.E-4, 0.0,
			14.80,	     63.E-4,    0.0,      -2.E-4, 0.0,
			9.60,	    -59.E-4,    0.0,      26.E-4, 0.0,
			27.40,     -58.E-4,   -0.1E-4,    32.E-4, 0.0,
			9.10,     -51.E-4,    0.0,      27.E-4, 0.0,
			205.90,	     48.E-4,    0.0,       1.E-4, 0.0,
			1305.50,	     46.E-4,    0.0,     -24.E-4, 0.0,
			7.10,	    -38.E-4,    0.0,      16.E-4, 0.0,
			6.90,	    -31.E-4,    0.0,      13.E-4, 0.0,
			13.80,	     29.E-4,    0.0,      -1.E-4, 0.0,
			23.90,	     29.E-4,    0.0,     -12.E-4, 0.0,
			13.60,	     26.E-4,    0.0,      -1.E-4, 0.0,
			173.30,	    -22.E-4,    0.0,       0.0,  0.0,
			27.0,	     21.E-4,    0.0,     -10.E-4, 0.0,
			182.60,	     17.E-4,   -0.1E-4,     0.0,  0.0,
			91.30,	    -16.E-4,    0.1E-4,     7.E-4, 0.0,
			32.0,       16.E-4,    0.0,      -8.E-4, 0.0,
			386.0,	    -15.E-4,    0.0,       9.E-4, 0.0,
			31.70,	    -13.E-4,    0.0,       7.E-4, 0.0,
			346.60,	    -12.E-4,    0.0,       6.E-4, 0.0,
			1095.20,	     11.E-4,    0.0,       0.0,  0.0,
			9.50,	    -10.E-4,    0.0,       5.E-4, 0.0,
			5.60,	     -8.E-4,    0.0,       3.E-4, 0.0,
			14.20,	     -7.E-4,    0.0,       3.E-4, 0.0,
			7.10,	     -7.E-4,    0.0,       3.E-4, 0.0,
			34.80,	     -7.E-4,    0.0,       0.0,  0.0,
			13.20,	      7.E-4,    0.0,      -3.E-4, 0.0,
			199.80,	     -6.E-4,    0.0,       3.E-4, 0.0,
			14.80,	     -6.E-4,    0.0,       3.E-4, 0.0,
			12.80,	      6.E-4,    0.0,      -3.E-4, 0.0,
			9.60,	      6.E-4,    0.0,       0.0,  0.0,
			23.90,       6.E-4,    0.0,      -3.E-4, 0.0,
			14.70,      -5.E-4,    0.0,       3.E-4, 0.0,
			346.60,      -5.E-4,    0.0,       3.E-4, 0.0,
			6.90,      -5.E-4,    0.0,       3.E-4, 0.0,
			29.80,       5.E-4,    0.0,       0.0,  0.0,
			411.80,      -4.E-4,    0.0,       0.0,  0.0,
			29.50,      -4.E-4,    0.0,       0.0,  0.0,
			15.40,      -4.E-4,    0.0,       0.0,  0.0,
			26.90,       4.E-4,    0.0,       0.0,  0.0,
			212.30,       4.E-4,    0.0,      -2.E-4, 0.0,
			119.60,       4.E-4,    0.0,      -2.E-4, 0.0,
			25.60,      -3.E-4,    0.0,       0.0,  0.0 };
		double AMPL1[250] = { 3232.90,      -3.E-4,    0.0,       0.0,  0.0,
			9.80,      -3.E-4,    0.0,       1.E-4, 0.0,
			7.20,      -3.E-4,    0.0,       1.E-4, 0.0,
			9.40,      -3.E-4,    0.0,       1.E-4, 0.0,
			5.50,      -3.E-4,    0.0,       1.E-4, 0.0,
			1615.70,      -3.E-4,    0.0,       1.E-4, 0.0,
			9.10,       3.E-4,    0.0,       0.0,  0.0,
			5.80,      -2.E-4,    0.0,       1.E-4, 0.0,
			27.80,      -2.E-4,    0.0,       1.E-4, 0.0,
			32.60,      -2.E-4,    0.0,       1.E-4, 0.0,
			6786.30,      -2.E-4,    0.0,       1.E-4, 0.0,
			13.70,      -2.E-4,    0.0,       1.E-4, 0.0,
			13.80,       2.E-4,    0.0,      -1.E-4, 0.0,
			9.20,       2.E-4,    0.0,       0.0,  0.0,
			8.90,       2.E-4,    0.0,      -1.E-4, 0.0,
			9.30,       2.E-4,    0.0,      -1.E-4, 0.0,
			9.60,      -1.E-4,    0.0,       0.0,  0.0,
			5.60,      -1.E-4,    0.0,       1.E-4, 0.0,
			34.70,      -1.E-4,    0.0,       0.0,  0.0,
			14.20,      -1.E-4,    0.0,       0.0,  0.0,
			117.50,      -1.E-4,    0.0,       0.0,  0.0,
			329.80,      -1.E-4,    0.0,       0.0,  0.0,
			32.80,      -1.E-4,    0.0,       0.0,  0.0,
			9.50,      -1.E-4,    0.0,       0.0,  0.0,
			32.80,      -1.E-4,    0.0,       0.0,  0.0,
			10.10,      -1.E-4,    0.0,       0.0,  0.0,
			15.90,      -1.E-4,    0.0,       0.0,  0.0,
			4.80,      -1.E-4,    0.0,       0.0,  0.0,
			25.40,      -1.E-4,    0.0,       0.0,  0.0,
			7.30,      -1.E-4,    0.0,       1.E-4, 0.0,
			4.70,      -1.E-4,    0.0,       0.0,  0.0,
			14.20,      -1.E-4,    0.0,       0.0,  0.0,
			13.60,      -1.E-4,    0.0,       0.0,  0.0,
			12.70,       1.E-4,    0.0,       0.0,  0.0,
			409.20,       1.E-4,    0.0,       0.0,  0.0,
			22.50,       1.E-4,    0.0,      -1.E-4, 0.0,
			8.70,       1.E-4,    0.0,       0.0,  0.0,
			14.60,       1.E-4,    0.0,      -1.E-4, 0.0,
			27.30,       1.E-4,    0.0,      -1.E-4, 0.0,
			169.00,       1.E-4,    0.0,       0.0,  0.0,
			13.10,       1.E-4,    0.0,       0.0,  0.0,
			9.10,       1.E-4,    0.0,       0.0,  0.0,
			131.70,       1.E-4,    0.0,       0.0,  0.0,
			7.10,       1.E-4,    0.0,       0.0,  0.0,
			12.80,       1.E-4,    0.0,      -1.E-4, 0.0,
			943.20,       1.E-4,    0.0,       0.0,  0.0,
			29.30,       1.E-4,    0.0,       0.0,  0.0,
			388.30,       1.E-4,    0.0,       0.0,  0.0,
			35.00,       1.E-4,    0.0,       0.0,  0.0,
			27.30,       1.E-4,    0.0,       0.0,  0.0 };

		double ARG0[275] = { 0.0, 0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 2.0,-2.0, 2.0,
			0.0, 0.0, 2.0, 0.0, 2.0,
			0.0, 0.0, 0.0, 0.0, 2.0,
			0.0, 1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 2.0,-2.0, 2.0,
			0.0, 0.0, 2.0, 0.0, 1.0,
			1.0, 0.0, 2.0, 0.0, 2.0,
			0.0,-1.0, 2.0,-2.0, 2.0,
			1.0, 0.0, 0.0,-2.0, 0.0,
			0.0, 0.0, 2.0,-2.0, 1.0,
			-1.0, 0.0, 2.0, 0.0, 2.0,
			1.0, 0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 2.0, 0.0,
			-1.0, 0.0, 2.0, 2.0, 2.0,
			-1.0, 0.0, 0.0, 0.0, 1.0,
			1.0, 0.0, 2.0, 0.0, 1.0,
			2.0, 0.0, 0.0,-2.0, 0.0,
			-2.0, 0.0, 2.0, 0.0, 1.0,
			0.0, 0.0, 2.0, 2.0, 2.0,
			2.0, 0.0, 2.0, 0.0, 2.0,
			2.0, 0.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 2.0,-2.0, 2.0,
			0.0, 0.0, 2.0, 0.0, 0.0,
			0.0, 0.0, 2.0,-2.0, 0.0,
			-1.0, 0.0, 2.0, 0.0, 1.0,
			0.0, 2.0, 0.0, 0.0, 0.0,
			0.0, 2.0, 2.0,-2.0, 2.0,
			-1.0, 0.0, 0.0, 2.0, 1.0,
			0.0, 1.0, 0.0, 0.0, 1.0,
			1.0, 0.0, 0.0,-2.0, 1.0,
			0.0,-1.0, 0.0, 0.0, 1.0,
			2.0, 0.0,-2.0, 0.0, 0.0,
			-1.0, 0.0, 2.0, 2.0, 1.0,
			1.0, 0.0, 2.0, 2.0, 2.0,
			0.0,-1.0, 2.0, 0.0, 2.0,
			0.0, 0.0, 2.0, 2.0, 1.0,
			1.0, 1.0, 0.0,-2.0, 0.0,
			0.0, 1.0, 2.0, 0.0, 2.0,
			-2.0, 0.0, 0.0, 2.0, 1.0,
			0.0, 0.0, 0.0, 2.0, 1.0,
			2.0, 0.0, 2.0,-2.0, 2.0,
			1.0, 0.0, 0.0, 2.0, 0.0,
			1.0, 0.0, 2.0,-2.0, 1.0,
			0.0, 0.0, 0.0,-2.0, 1.0,
			0.0,-1.0, 2.0,-2.0, 1.0,
			2.0, 0.0, 2.0, 0.0, 1.0,
			1.0,-1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0,-1.0, 0.0,
			0.0, 0.0, 0.0, 1.0, 0.0,
			0.0, 1.0, 0.0,-2.0, 0.0,
			1.0, 0.0,-2.0, 0.0, 0.0,
			2.0, 0.0, 0.0,-2.0, 1.0,
			0.0, 1.0, 2.0,-2.0, 1.0 };
		double ARG1[255] = { 1.0, 1.0, 0.0, 0.0, 0.0,
			1.0,-1.0, 0.0,-1.0, 0.0,
			-1.0,-1.0, 2.0, 2.0, 2.0,
			0.0,-1.0, 2.0, 2.0, 2.0,
			1.0,-1.0, 2.0, 0.0, 2.0,
			3.0, 0.0, 2.0, 0.0, 2.0,
			-2.0, 0.0, 2.0, 0.0, 2.0,
			1.0, 0.0, 2.0, 0.0, 0.0,
			-1.0, 0.0, 2.0, 4.0, 2.0,
			1.0, 0.0, 0.0, 0.0, 2.0,
			-1.0, 0.0, 2.0,-2.0, 1.0,
			0.0,-2.0, 2.0,-2.0, 1.0,
			-2.0, 0.0, 0.0, 0.0, 1.0,
			2.0, 0.0, 0.0, 0.0, 1.0,
			3.0, 0.0, 0.0, 0.0, 0.0,
			1.0, 1.0, 2.0, 0.0, 2.0,
			0.0, 0.0, 2.0, 1.0, 2.0,
			1.0, 0.0, 0.0, 2.0, 1.0,
			1.0, 0.0, 2.0, 2.0, 1.0,
			1.0, 1.0, 0.0,-2.0, 1.0,
			0.0, 1.0, 0.0, 2.0, 0.0,
			0.0, 1.0, 2.0,-2.0, 0.0,
			0.0, 1.0,-2.0, 2.0, 0.0,
			1.0, 0.0,-2.0, 2.0, 0.0,
			1.0, 0.0,-2.0,-2.0, 0.0,
			1.0, 0.0, 2.0,-2.0, 0.0,
			1.0, 0.0, 0.0,-4.0, 0.0,
			2.0, 0.0, 0.0,-4.0, 0.0,
			0.0, 0.0, 2.0, 4.0, 2.0,
			0.0, 0.0, 2.0,-1.0, 2.0,
			-2.0, 0.0, 2.0, 4.0, 2.0,
			2.0, 0.0, 2.0, 2.0, 2.0,
			0.0,-1.0, 2.0, 0.0, 1.0,
			0.0, 0.0,-2.0, 0.0, 1.0,
			0.0, 0.0, 4.0,-2.0, 2.0,     
			0.0, 1.0, 0.0, 0.0, 2.0,
			1.0, 1.0, 2.0,-2.0, 2.0,
			3.0, 0.0, 2.0,-2.0, 2.0,
			-2.0, 0.0, 2.0, 2.0, 2.0,
			-1.0, 0.0, 0.0, 0.0, 2.0,
			0.0, 0.0,-2.0, 2.0, 1.0,
			0.0, 1.0, 2.0, 0.0, 1.0,
			-1.0, 0.0, 4.0, 0.0, 2.0,
			2.0, 1.0, 0.0,-2.0, 0.0,
			2.0, 0.0, 0.0, 2.0, 0.0,
			2.0, 0.0, 2.0,-2.0, 1.0,
			2.0, 0.0,-2.0, 0.0, 1.0,
			1.0,-1.0, 0.0,-2.0, 0.0,
			-1.0, 0.0, 0.0, 1.0, 1.0,
			-1.0,-1.0, 0.0, 2.0, 1.0,
			0.0, 1.0, 0.0, 1.0, 0.0 };

		//AMPL0(280);
		//AMPL1(250);
		//ARG0(275);
		//ARG1(255);
		//EQUIVALENCE (AMPL(1),AMPL0(1)),(AMPL(281),AMPL1(1))
		//EQUIVALENCE (ARG(1),ARG0(1)),(ARG(276),ARG1(1))
		double AMPL[530];
		double ARG[530];

		for( int it = 0; it < 280; it++ )
			AMPL[it] = AMPL0[it];
		for( int it = 0; it < 250; it++ )
			AMPL[it+280] = AMPL1[it];

		for( int it = 0; it < 275; it++ )
			ARG[it] = ARG0[it];
		for( int it = 0; it < 255; it++ )
			ARG[it+275] = ARG1[it];
		//---------------------------//

		cutilSafeCall( cudaMemcpy( d_AMPL, AMPL, memSizeAMPL_ARG, cudaMemcpyHostToDevice )) ;
		cutilSafeCall( cudaMemcpy( d_ARG, ARG, memSizeAMPL_ARG, cudaMemcpyHostToDevice )) ;

	}
	//==============================================================================//
};

#endif